security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_MANAGER, ROLE_USER]
        ROLE_MANAGER: [ROLE_USER]

    # Hashage des mots de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Gestion des utilisateurs (provider)
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            access_denied_url: /login  # Rediriger vers la page de connexion si un accès est refusé


            # Formulaire de connexion
            form_login:
                login_path: login   # Chemin pour afficher le formulaire de connexion
                check_path: login   # Chemin pour vérifier l'identité de l'utilisateur (soumission du formulaire)
                username_parameter: email  # Nom du champ pour l'email
                password_parameter: password  # Nom du champ pour le mot de passe
            logout:
                path: /logout
                target: /

    # Contrôle d'accès pour les routes sécurisées
    access_control:
   # Autoriser la lecture à tout le monde (authentifié ou non)
        # - { path: '^/courses/\d+', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: '^/courses', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Autoriser certaines actions aux rôles spécifiques
        - { path: '^/courses/new', roles: ROLE_ADMIN }
        - { path: '^/courses/\d+/edit', roles: ROLE_MANAGER }
        - { path: '^/courses/\d+/delete', roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
